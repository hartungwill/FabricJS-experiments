
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <style>
        #c {
            border: 1px solid #ccc;
        }
    </style>
</head>
<body>

    <button class="btn btn-success" id="carregaImagem" onclick="inicializar();">
        Carregar Imagem
    </button>
    <br />
    <br />
    <br />

    @*<canvas id="c" width="800" height="800"></canvas>*@
    <canvas id="c" width="2480" height="3284"></canvas>

    @*<button class="btn btn-success" id="rasterizar" onclick="rasterize()">
            Rasterizar
        </button>
        <br />
        <button class="btn btn-success" id="rasterizar2" onclick="rasterize2()">
            Rasterizar Método 2
        </button>*@
    <br />
    <button class="btn btn-success" id="rasterizar3" onclick="rasterizePrint()">
        Rasterizar para impressão
    </button>

    <br />
    @*<button id="btnZoomIn">ZoomIn</button>
        <button id="btnZoomOut">ZoomOut</button>*@
    @*<button id="btnResetZoom" onclick="resetZoom();">Reset Zoom</button>*@
    @*<button id="btnZoomIT">Zoom IT</button>
        <button id="btnZoom3">Zoom 3</button>*@
    @*<button id="btnZoomWork" onclick="deZoom(AreaCanvas.Propriedades.scale);">De-Zoom</button>*@
    <br />
    <br />
    <div id="imager"></div>
    <a href="https://br.freepik.com/vetores/fundo">Fundo vetor criado por alliesinteractive - br.freepik.com</a>

</body>
</html>

@*<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/1.2.1/lodash.min.js"></script>*@
<script src="~/Content/JS/lodash.min.js"></script>
@*<script src="https://s3-ap-southeast-1.amazonaws.com/imgedi/fabric.js"></script>*@
<script src="~/Content/JS/fabric.min.js"></script>
@*<script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>*@
<script src="~/Content/JS/jquery-3.5.1.min.js"></script>
<script>

        // Objetos backend
        const AreaCanvas = (function () {

            const Propriedades = {
                ID: 'c',
                width: 2480,
                height: 3284,
                scale: 4
            };

            return {
                Propriedades
            };
        })();

        const Clip = (function () {

            const Dimensoes = [
                {
                    nomeClip: 'logo',
                    //originX: 'left',
                    //originY: 'top',
                    top: 988,
                    left: 136,
                    width: 1000,
                    height: 900
                }, {
                    nomeClip: 'pug',
                    //originX: 'left',
                    //originY: 'top',
                    top: 988,
                    left: 1336,
                    width: 1000,
                    height: 900
                }];

            return {
                Dimensoes
            };
        })();

        const Objetos = (function () {

            const Dimensoes = [{
                tipo: 'fundo',
                url: '/Content/Images/layout.jpg',
                //angle: 0,
                //width: 2480,
                //height: 3284,
                left: 0,
                top: 0,
                clipName: null,
                selecionavel: false,
                preservarEmpilhamento: true,
                ordem: 1
            }, {
                tipo: 'imagemClip',
                url: '/Content/Images/pug.jpg',
                //angle: 0,
                //width: 500,
                //height: 988,
                left: 10,
                top: 988,
                clipName: 'logo',
                selecionavel: true,
                preservarEmpilhamento: true,
                ordem: 2
            }, {
                tipo: 'imagemClip',
                url: '/Content/Images/pughobbit.jpg',
                //angle: 0, //45
                //width: 500,
                //height: 988,
                left: 1336,
                top: 988,
                clipName: 'pug',
                selecionavel: true,
                preservarEmpilhamento: true,
                ordem: 3
            }, {
                tipo: 'texto',
                texto: 'VEJA NESTE FLYER COMO OS PUGS SÃO LEGAIS',
                left: 300,
                top: 350,
                width: 1900,
                fontSize: 145,
                fill: '#FFF',
                stroke: "#888",
                strokeWidth: 5,
                selecionavel: true,
                ordem: 4
            }, {
                tipo: 'texto',
                texto: 'Os 2 pugs da ponta tem máscara aplicada, os 2 centrais, não',
                left: 245,
                top: 2700,
                width: 1900,
                fontSize: 80,
                fill: '#000',                
                strokeWidth: 5,                
                selecionavel: true,
                ordem: 5
            },{
                tipo: 'imagem',
                url: '/Content/Images/pugmount.jpg',
                //angle: 0, //45
                //width: 500,
                //height: 988,
                left: 700,
                top: 1088,
                //clipName: 'pug',
                selecionavel: true,
                preservarEmpilhamento: true,
                ordem: 6
            },{
                tipo: 'imagem',
                url: '/Content/Images/pugarmor.jpg',
                //angle: 0, //45
                width: 600,
                height: 600,
                left: 700,
                top: 1988,
                //clipName: 'pug',
                selecionavel: true,
                preservarEmpilhamento: true,
                ordem: 7
            }];

            return {
                Dimensoes
            };
        })();

        //Constantes
        //const canvas = document.getElementById("c");

        //const img01URL = '/Content/Images/pug.jpg';
        //const img02URL = '/Content/Images/pug.jpg';
        //const fundoURL = '/Content/Images/layout_base.jpg';



        //var Fundo = (function () {

        //    const Dimensoes = {
        //        angle: 0,
        //        width: 2480,
        //        height: 3284,
        //        left: 10,
        //        top: 300,
        //        scaleX: 1,
        //        scaleY: 1
        //    };

        //    return {
        //        Dimensoes
        //    };
        //})();



        // Functions dos Botões
        const canvas = new fabric.Canvas(AreaCanvas.Propriedades.ID);

        function inicializar() {
            //limpar canvas
            canvas.clear();

            //loop dos CLIPs (máscaras)
            for (let clip = 0; clip < Clip.Dimensoes.length; clip++) {
                const clipAtual = Clip.Dimensoes[clip];
                carregarClip(canvas, clipAtual);
            }

            //loop dos elementos do canvas
            for (let objeto = 0; objeto < Objetos.Dimensoes.length; objeto++) {

                const objetoAtual = Objetos.Dimensoes[objeto];

                if (objetoAtual.tipo === 'fundo') {
                    carregarFundo(canvas, objetoAtual);
                } else if (objetoAtual.tipo === 'imagemClip') {
                    carregarImagemComClip(canvas, objetoAtual);
                } else if (objetoAtual.tipo === 'imagem') {
                    carregarImagem(canvas, objetoAtual);
                } else if (objetoAtual.tipo === 'texto') {
                    carregaTexto(canvas, objetoAtual);
                }
            }

            //Ajusta proporção canvas
            zoomWork(AreaCanvas.Propriedades.scale);
        }

        //Functions dos tipos de objetos no canvas
        function carregarClip(canvas, objetoClip) {
            // gera o CLIP (máscara de recorte)
            let clipPoly = new fabric.Rect({
                originX: 'left',
                originY: 'top',
                left: objetoClip.left,
                top: objetoClip.top,
                width: objetoClip.width,
                height: objetoClip.height,
                fill: 'transparent', /* use transparent for no fill */
                strokeWidth: 0,
                selectable: false
            });

            // O objeto criado precisa desta propriedade como ID para que as functions `clipTo`
            // das imagems o encontrem para referência
            clipPoly.set({
                clipFor: objetoClip.nomeClip
            });

            canvas.add(clipPoly);
        }

        function carregarFundo(canvas, objetoFundo) {

            //FUNDO
            let fundoImg = new Image();
            fundoImg.onload = function (img) {
                let imagemFabric = new fabric.Image(fundoImg, {
                    //width: Imagem.Dimensoes[0].width,
                    //height: Imagem.Dimensoes[0].height,
                    //scaleX: Imagem.Dimensoes[0].scaleX,
                    //scaleY: Imagem.Dimensoes[0].scaleY,
                    left: objetoFundo.left,
                    top: objetoFundo.top,
                    selectable: objetoFundo.selecionavel,
                    preserveObjectStacking: objetoFundo.preservarEmpilhamento
                });
                canvas.add(imagemFabric);
                canvas.sendToBack(imagemFabric);
                //canvas.moveTo(fundo, objetoFundo.ordem);
            };
            fundoImg.src = objetoFundo.url;
        }

        function carregarImagem(canvas, objetoImagem) {

            //Add imagem
            let imagemGerada = new Image();
            imagemGerada.onload = function (img) {
                const imagemFabric = new fabric.Image(imagemGerada, {
                    left: objetoImagem.left,
                    top: objetoImagem.top
                });
                canvas.add(imagemFabric);
            };
            imagemGerada.src = objetoImagem.url;
        }

        function carregarImagem(canvas, objetoImagem) {
            let imagemGerada = new Image();
            imagemGerada.onload = function (img) {
                let imagemFabric = new fabric.Image(imagemGerada, {
                    left: objetoImagem.left,
                    top: objetoImagem.top
                });
                canvas.add(imagemFabric);
            };
            imagemGerada.src = objetoImagem.url;
        }

        function carregarImagemComClip(canvas, objetoImagem) {

            //// gera o CLIP (máscara de recorte)
            //var clipPoly = new fabric.Rect({
            //    originX: Clip.Dimensoes[1].originX,
            //    originY: Clip.Dimensoes[1].originY,
            //    left: Clip.Dimensoes[1].left,
            //    top: Clip.Dimensoes[1].top,
            //    width: Clip.Dimensoes[1].width,
            //    height: Clip.Dimensoes[1].height,
            //    scaleX: Clip.Dimensoes[1].scaleX,
            //    scaleY: Clip.Dimensoes[1].scaleY,
            //    fill: 'transparent', /* use transparent for no fill */
            //    strokeWidth: 0,
            //    selectable: false
            //});

            //// We give these `Rect` objects a name property so the `clipTo` functions can
            //// find the one by which they want to be clipped.
            //clipPoly.set({
            //    clipFor: 'pug'
            //});
            //canvas.add(clipPoly);

            //// CLIP - máscara de recorte 2
            //var clipRect2 = new fabric.Rect({
            //    originX: Clip.Dimensoes[0].originX,
            //    originY: Clip.Dimensoes[0].originY,
            //    left: Clip.Dimensoes[0].left,
            //    top: Clip.Dimensoes[0].top,
            //    width: Clip.Dimensoes[0].width,
            //    height: Clip.Dimensoes[0].height,
            //    scaleX: Clip.Dimensoes[0].scaleX,
            //    scaleY: Clip.Dimensoes[0].scaleY,
            //    fill: 'transparent', /* use transparent for no fill */
            //    strokeWidth: 0,
            //    selectable: false
            //});

            //// We give these `Rect` objects a name property so the `clipTo` functions can
            //// find the one by which they want to be clipped.
            //clipRect2.set({
            //    clipFor: 'logo'
            //});
            //canvas.add(clipRect2);


            //FUNDO
            //var fundoImg = new Image();
            //fundoImg.onload = function (img) {
            //    var fundo = new fabric.Image(fundoImg, {
            //        //width: Imagem.Dimensoes[0].width,
            //        //height: Imagem.Dimensoes[0].height,
            //        //scaleX: Imagem.Dimensoes[0].scaleX,
            //        //scaleY: Imagem.Dimensoes[0].scaleY,
            //        left: Objetos.Dimensoes[0].left,
            //        top: Objetos.Dimensoes[0].top,
            //        selectable: Objetos.Dimensoes[0].selecionavel,
            //        preserveObjectStacking: Objetos.Dimensoes[0].preservarEmpilhamento
            //    });
            //    canvas.add(fundo);
            //    canvas.sendToBack(fundo);
            //};
            //fundoImg.src = Objetos.Dimensoes[0].url;

            //PUG ESQUERDA
            let imagemGerada = new Image();
            imagemGerada.onload = function (img) {
                let imagemFabric = new fabric.Image(imagemGerada, {
                    left: objetoImagem.left,
                    top: objetoImagem.top,
                    clipName: objetoImagem.clipName,
                    clipTo: function (ctx) {
                        return _.bind(clipByName, imagemFabric)(ctx)
                    }
                });
                canvas.add(imagemFabric);
            };
            imagemGerada.src = objetoImagem.url;

            ////PUG DIREITA
            //var pugImg = new Image();
            //pugImg.onload = function (img) {
            //    var pug = new fabric.Image(pugImg, {
            //        //angle: Imagem.Dimensoes[2].angle,
            //        //width: Imagem.Dimensoes[2].width,
            //        //height: Imagem.Dimensoes[2].height,
            //        left: Objetos.Dimensoes[2].left,
            //        top: Objetos.Dimensoes[2].top,
            //        //scaleX: Imagem.Dimensoes[2].scaleX,
            //        //scaleY: Imagem.Dimensoes[2].scaleY,
            //        clipName: Objetos.Dimensoes[2].clipName,
            //        clipTo: function (ctx) {
            //            return _.bind(clipByName, pug)(ctx)
            //        }
            //    });
            //    canvas.add(pug);
            //};
            //pugImg.src = Objetos.Dimensoes[2].url;

            //Título
            //carregaTexto();

            //Ajusta proporção canvas
            //zoomWork(AreaCanvas.Propriedades.scale);
        }

        function carregaTexto(canvas, Texto) {

            let textoFabric = new fabric.Textbox(Texto.texto, {
                left: Texto.left,
                top: Texto.top,
                width: Texto.width,
                fontSize: Texto.fontSize,
                fill: Texto.fill,
                strokeWidth: Texto.strokeWidth,
                stroke: Texto.stroke
            });
            canvas.add(textoFabric);
        }

        //Zoom
        function zoomWork(scale) {
            const proporcao = 1 / scale;
            setCanvas(proporcao);
        }

        function deZoom(scale) {
            let zoom = scale * (canvas.viewportTransform[0] || 1);
            setCanvas(zoom);
        }

        function setCanvas(proporcao) {
            canvas.setHeight(AreaCanvas.Propriedades.height * proporcao);
            canvas.setWidth(AreaCanvas.Propriedades.width * proporcao);
            canvas.setZoom(proporcao);
            canvas.renderAll();
            canvas.calcOffset();
        }

        // Impressão
        function rasterizePrint() {
            //remove a selação nos objetos, se houver
            canvas.deactivateAll().renderAll();

            //retira o zoom para renderizar a imagem full
            deZoom(AreaCanvas.Propriedades.scale);

            //Converte o canvas em JPEG e, em sequência, para blob
            let dataURL = canvas.toDataURL({ format: 'jpeg' });
            const blob = dataURLtoBlob(dataURL);
            const objurl = URL.createObjectURL(blob);

            // Cria um link e faz o download do blob, clicando
            let link = document.createElement("a");
            link.download = "flyer.jpg";
            link.href = objurl;
            link.click();

            //volta o canvas para a posição de edição
            zoomWork(AreaCanvas.Propriedades.scale);
        }

        function dataURLtoBlob(dataurl) {
            var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new Blob([u8arr], { type: mime });
        }

        //FabricJS Helpers
        function findByClipName(name) {
            return _(canvas.getObjects()).where({
                clipFor: name
            }).first()
        }

        var clipByName = function (ctx) {
            this.setCoords();
            var clipRect = findByClipName(this.clipName);
            var scaleXTo1 = (1 / this.scaleX);
            var scaleYTo1 = (1 / this.scaleY);
            ctx.save();

            var ctxLeft = -(this.width / 2) + clipRect.strokeWidth;
            var ctxTop = -(this.height / 2) + clipRect.strokeWidth;
            //var ctxWidth = clipRect.width - clipRect.strokeWidth;
            //var ctxHeight = clipRect.height - clipRect.strokeWidth;

            ctx.translate(ctxLeft, ctxTop);
            ctx.rotate(this.angle * -1 * Math.PI / 180);
            ctx.scale(scaleXTo1, scaleYTo1);

            var x = this.canvas.viewportTransform;

            ctx.scale(1 / x[0], 1 / x[3]);
            ctx.translate(x[4], x[5]);

            //var scaleX = this.canvas.viewportTransform[0];
            //var scaleY = this.canvas.viewportTransform[3];

            ctx.beginPath();

            ctx.rect(
                x[0] * clipRect.left - this.oCoords.tl.x,
                x[3] * clipRect.top - this.oCoords.tl.y,
                x[0] * clipRect.width,
                x[3] * clipRect.height);
            ctx.closePath();
            ctx.restore();
        }

        // Since the `angle` property of the Image object is stored
        // in degrees, we'll use this to convert it to radians.
        //function degToRad(degrees) {
        //    return degrees * (Math.PI / 180);
        //}

         //function printCanvas() {
        //    var dataUrl = document.getElementById('c').toDataURL( /* data multiplier?*/); //attempt to save base64 string to server using this var
        //    var windowContent = '<!DOCTYPE html>';
        //    windowContent += '<html>'
        //    windowContent += '<head><title>Print canvas</title></head>';
        //    windowContent += '<body>'
        //    windowContent += '<img src="' + dataUrl + '" >';
        //    windowContent += '</body>';
        //    windowContent += '</html>';
        //    var printWin = window.open('', '', 'width=340,height=260');
        //    printWin.document.open();
        //    printWin.document.write(windowContent);
        //}

        //function rasterize() {
        //    const dataURL = canvas.toDataURL("image/png");

        //    let img = document.createElement("img");
        //    img.src = dataURL;
        //    let imager = document.getElementById("imager");
        //    imager.textContent = '';
        //    imager.appendChild(img);
        //}

        //function rasterize2() {

        //    let dataURL = canvas.toDataURL({
        //        format: 'jpeg',
        //        multiplier: 4
        //    });

        //    //console.log(dataURL);

        //    let img = document.createElement("img");
        //    img.src = dataURL;
        //    let imager = document.getElementById("imager");
        //    imager.textContent = '';
        //    imager.appendChild(img);
        //}


        //FUNDO
        //canvas.setBackgroundImage(fundoURL, canvas.renderAll.bind(canvas), {
        //    // Optionally add an opacity lvl to the image
        //    backgroundImageOpacity: 0.5,
        //    scaleX: Fundo.Dimensoes.scaleX,
        //    scaleY: Fundo.Dimensoes.scaleY,
        //    // should the image be resized to fit the container?
        //    backgroundImageStretch: true
        //});


        //var downloadCanvas = function () {
        //    var canvas = document.querySelector(".upper-canvas");

        //    var link = document.createElement("a");
        //    var imgData = canvas.toDataURL({
        //        format: 'png',
        //        multiplier: 4
        //    });

        //    var blob = dataURLtoBlob(imgData);
        //    console.log(imgData);
        //    var objurl = URL.createObjectURL(blob);

        //    link.download = "helloWorld.png";

        //    link.href = objurl;

        //    link.click();
        //}





        //function zoomIt(factor) {
        //    canvas.setHeight(canvas.getHeight() * factor);
        //    canvas.setWidth(canvas.getWidth() * factor);

        //    if (canvas.backgroundImage) {
        //        // Need to scale background images as well
        //        let bi = canvas.backgroundImage;
        //        bi.width = bi.width * factor; bi.height = bi.height * factor;
        //    }
        //    let objects = canvas.getObjects();

        //    console.log(objects);

        //    for (let i in objects) {
        //        const scaleX = objects[i].scaleX;
        //        const scaleY = objects[i].scaleY;
        //        const left = objects[i].left;
        //        const top = objects[i].top;

        //        const tempScaleX = scaleX * factor;
        //        const tempScaleY = scaleY * factor;
        //        const tempLeft = left * factor;
        //        const tempTop = top * factor;

        //        objects[i].scaleX = tempScaleX;
        //        objects[i].scaleY = tempScaleY;
        //        objects[i].left = tempLeft;
        //        objects[i].top = tempTop;

        //        objects[i].setCoords();
        //    }

        //    canvas.renderAll();
        //    canvas.calcOffset();
        //}

        //function zoom2(zoom) {
        //    canvas.setZoom(zoom);
        //    /* need to enlarge canvas otherwise the svg will be clipped */
        //    canvas.setWidth(canvas.getWidth() * zoom).setHeight(canvas.getHeight() * zoom);
        //    var svg = canvas.toSVG();
        //    /* need to set back canvas dimensions */
        //    canvas.setWidth(canvas.getWidth() / zoom).setHeight(canvas.getHeight() / zoom);
        //}

        //function zoom3() {
        //    let zoom = 2 * (canvas.viewportTransform[0] || 1);
        //    canvas.setZoom(zoom);
        //    canvas.renderAll();
        //}



        //const img01URL = '/Content/Images/logo4w.png';





        // Note the use of the `originX` and `originY` properties, which we set
        // to 'left' and 'top', respectively. This makes the math in the `clipTo`
        // functions a little bit more straight-forward.
        //var clipPoly = new fabric.Polygon([
        //    { x: 180, y: 10 },
        //    { x: 300, y: 50 },
        //    { x: 300, y: 180 },
        //    { x: 180, y: 220 }
        //], {
        //    originX: Clip.Dimensoes[1].originX,
        //    originY: Clip.Dimensoes[1].originY,
        //    left: Clip.Dimensoes[1].left,
        //    top: Clip.Dimensoes[1].top,
        //    width: Clip.Dimensoes[1].width,
        //    height: Clip.Dimensoes[1].height,
        //    fill: '#DDD', /* use transparent for no fill */
        //    strokeWidth: 0,
        //    selectable: false
        //});

        //HELPERS


    //    (function() {
    //  var canvas = this.__canvas = new fabric.Canvas('c');
    //  fabric.Object.prototype.transparentCorners = false;

    //  var rect = new fabric.Rect({
    //    left: 100,
    //    top: 50,
    //    width: 100,
    //    height: 100,
    //    fill: 'green',
    //    angle: 20,
    //    padding: 10
    //  });
    //  canvas.add(rect);

    //  fabric.loadSVGFromURL('../assets/15.svg', function(objects, options) {

    //    var shape = fabric.util.groupSVGElements(objects, options);
    //    canvas.add(shape.scale(0.6));
    //    shape.set({ left: 200, top: 100 }).setCoords();
    //    canvas.renderAll();

    //    canvas.forEachObject(function(obj) {
    //      var setCoords = obj.setCoords.bind(obj);
    //      obj.on({
    //        moving: setCoords,
    //        scaling: setCoords,
    //        rotating: setCoords
    //      });
    //    })
    //  });

    //  canvas.on('after:render', function() {
    //    canvas.contextContainer.strokeStyle = '#555';

    //    canvas.forEachObject(function(obj) {
    //      var bound = obj.getBoundingRect();

    //      canvas.contextContainer.strokeRect(
    //        bound.left + 0.5,
    //        bound.top + 0.5,
    //        bound.width,
    //        bound.height
    //      );
    //    })
    //  });
    //})();

        // LAST WORKING
        //function carregarImagemOLD(canvas, Imagem) {

        //    // gera o CLIP (máscara de recorte)
        //    var clipPoly = new fabric.Rect({
        //        originX: Clip.Dimensoes[1].originX,
        //        originY: Clip.Dimensoes[1].originY,
        //        left: Clip.Dimensoes[1].left,
        //        top: Clip.Dimensoes[1].top,
        //        width: Clip.Dimensoes[1].width,
        //        height: Clip.Dimensoes[1].height,
        //        scaleX: Clip.Dimensoes[1].scaleX,
        //        scaleY: Clip.Dimensoes[1].scaleY,
        //        fill: 'transparent', /* use transparent for no fill */
        //        strokeWidth: 0,
        //        selectable: false
        //    });

        //    // We give these `Rect` objects a name property so the `clipTo` functions can
        //    // find the one by which they want to be clipped.
        //    clipPoly.set({
        //        clipFor: 'pug'
        //    });
        //    canvas.add(clipPoly);

        //    // CLIP - máscara de recorte 2
        //    var clipRect2 = new fabric.Rect({
        //        originX: Clip.Dimensoes[0].originX,
        //        originY: Clip.Dimensoes[0].originY,
        //        left: Clip.Dimensoes[0].left,
        //        top: Clip.Dimensoes[0].top,
        //        width: Clip.Dimensoes[0].width,
        //        height: Clip.Dimensoes[0].height,
        //        scaleX: Clip.Dimensoes[0].scaleX,
        //        scaleY: Clip.Dimensoes[0].scaleY,
        //        fill: 'transparent', /* use transparent for no fill */
        //        strokeWidth: 0,
        //        selectable: false
        //    });

        //    // We give these `Rect` objects a name property so the `clipTo` functions can
        //    // find the one by which they want to be clipped.
        //    clipRect2.set({
        //        clipFor: 'logo'
        //    });
        //    canvas.add(clipRect2);


        //    //FUNDO
        //    var fundoImg = new Image();
        //    fundoImg.onload = function (img) {
        //        var fundo = new fabric.Image(fundoImg, {
        //            //width: Imagem.Dimensoes[0].width,
        //            //height: Imagem.Dimensoes[0].height,
        //            //scaleX: Imagem.Dimensoes[0].scaleX,
        //            //scaleY: Imagem.Dimensoes[0].scaleY,
        //            left: Objetos.Dimensoes[0].left,
        //            top: Objetos.Dimensoes[0].top,
        //            selectable: Objetos.Dimensoes[0].selecionavel,
        //            preserveObjectStacking: Objetos.Dimensoes[0].preservarEmpilhamento
        //        });
        //        canvas.add(fundo);
        //        canvas.sendToBack(fundo);
        //    };
        //    fundoImg.src = Objetos.Dimensoes[0].url;

        //    //PUG ESQUERDA
        //    var logoImg = new Image();
        //    logoImg.onload = function (img) {
        //        var logo = new fabric.Image(logoImg, {
        //            //angle: Imagem.Dimensoes[1].angle,
        //            //width: Imagem.Dimensoes[1].width,
        //            //height: Imagem.Dimensoes[1].height,
        //            left: Objetos.Dimensoes[1].left,
        //            top: Objetos.Dimensoes[1].top,
        //            //scaleX: Imagem.Dimensoes[1].scaleX,
        //            //scaleY: Imagem.Dimensoes[1].scaleY,
        //            clipName: Objetos.Dimensoes[1].clipName,
        //            clipTo: function (ctx) {
        //                return _.bind(clipByName, logo)(ctx)
        //            }
        //        });
        //        canvas.add(logo);
        //    };
        //    logoImg.src = Objetos.Dimensoes[1].url;

        //    //PUG DIREITA
        //    var pugImg = new Image();
        //    pugImg.onload = function (img) {
        //        var pug = new fabric.Image(pugImg, {
        //            //angle: Imagem.Dimensoes[2].angle,
        //            //width: Imagem.Dimensoes[2].width,
        //            //height: Imagem.Dimensoes[2].height,
        //            left: Objetos.Dimensoes[2].left,
        //            top: Objetos.Dimensoes[2].top,
        //            //scaleX: Imagem.Dimensoes[2].scaleX,
        //            //scaleY: Imagem.Dimensoes[2].scaleY,
        //            clipName: Objetos.Dimensoes[2].clipName,
        //            clipTo: function (ctx) {
        //                return _.bind(clipByName, pug)(ctx)
        //            }
        //        });
        //        canvas.add(pug);
        //    };
        //    pugImg.src = Objetos.Dimensoes[2].url;

        //    //Título
        //    carregaTexto();

        //    //Ajusta proporção canvas
        //    zoomWork(AreaCanvas.Propriedades.scale);
        //}



        //$("#btnZoomIn").click(function () {
        //    zoomIn();
        //});

        //$("#btnZoomOut").click(function () {
        //    zoomOut();
        //});

        //$("#btnResetZoom").click(function () {
        //    resetZoom();
        //    //zoomWork(1);
        //});

        //$("#btnZoomIT").click(function () {
        //    zoomIt(2);
        //});

        //$("#btnZoom3").click(function () {
        //    zoom3(2);
        //});

        //$("#btnZoomWork").click(function () {
        //    zoomWork(2);
        //});

        //function zoomIn() {
        //    canvas.setZoom(canvas.getZoom() * 1.1);
        //    canvas.renderAll();
        //}
        //function zoomOut() {
        //    canvas.setZoom(canvas.getZoom() * 0.9);
        //    canvas.renderAll();
        //}

        //function resetZoom() {
        //    //reset zoom
        //    canvas.setZoom(1);

        //    // reset canvas (pegar dimensão do banco?)
        //    canvas.setHeight(800);
        //    canvas.setWidth(800);

        //    // refresh canvas
        //    canvas.renderAll();
        //}

        //


</script>